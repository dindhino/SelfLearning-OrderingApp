//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v5.9.</auto-generated>
//------------------------------------------------------------------------------
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using OrderingApp.EntityClasses;

namespace OrderingApp
{
	/// <summary>Model builder class for code first development.</summary>
	public partial class OrderingAppModelBuilder
	{
		/// <summary>Builds the model defined in this class with the modelbuilder specified. Called from the generated DbContext</summary>
		/// <param name="modelBuilder">The model builder to build the model with.</param>
		public virtual void BuildModel(ModelBuilder modelBuilder)
		{
			modelBuilder.HasDefaultSchema("dbo");
			MapCustomer(modelBuilder.Entity<Customer>());
			MapOrder(modelBuilder.Entity<Order>());
			MapOrderItem(modelBuilder.Entity<OrderItem>());
			MapProduct(modelBuilder.Entity<Product>());
		}

		/// <summary>Defines the mapping information for the entity 'Customer'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapCustomer(EntityTypeBuilder<Customer> config)
		{
			config.ToTable("Customers");
			config.HasKey(t => t.Id);
			config.Property(t => t.Id).HasColumnName("ID").ValueGeneratedOnAdd();
			config.Property(t => t.Name).HasMaxLength(50).IsRequired();
			config.Property(t => t.PhoneNo).HasMaxLength(45);
		}

		/// <summary>Defines the mapping information for the entity 'Order'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapOrder(EntityTypeBuilder<Order> config)
		{
			config.ToTable("Orders");
			config.HasKey(t => t.Id);
			config.Property(t => t.Id).HasColumnName("ID").ValueGeneratedOnAdd();
			config.Property(t => t.CustomerId).HasColumnName("CustomerID");
			config.HasOne(t => t.Customer).WithMany(t => t.Orders).HasForeignKey(t => t.CustomerId);
		}

		/// <summary>Defines the mapping information for the entity 'OrderItem'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapOrderItem(EntityTypeBuilder<OrderItem> config)
		{
			config.ToTable("OrderItems");
			config.HasKey(t => t.Id);
			config.Property(t => t.Id).HasColumnName("ID").ValueGeneratedOnAdd();
			config.Property(t => t.OrderId).HasColumnName("OrderID");
			config.Property(t => t.ProductId).HasColumnName("ProductID");
			config.Property(t => t.Quantity);
			config.HasOne(t => t.Order).WithMany(t => t.OrderItems).HasForeignKey(t => t.OrderId);
			config.HasOne(t => t.Product).WithMany(t => t.OrderItems).HasForeignKey(t => t.ProductId);
		}

		/// <summary>Defines the mapping information for the entity 'Product'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapProduct(EntityTypeBuilder<Product> config)
		{
			config.ToTable("Products");
			config.HasKey(t => t.Id);
			config.Property(t => t.Id).HasColumnName("ID").ValueGeneratedOnAdd();
			config.Property(t => t.Name).HasMaxLength(50).IsRequired();
			config.Property(t => t.Description);
		}
	}


	/// <summary>Extensions class for extension methods used in the model builder code</summary>
	internal static partial class OrderingAppModelBuilderExtensions
	{
		private static readonly string READONLY_ANNOTATION = "custom:readonly";

		/// <summary>Extension method which is used by the context class to determine whether an entity is readonly</summary>
		/// <typeparam name="TEntity">The type of the entity.</typeparam>
		/// <param name="builder">The entity type builder object to augment.</param>
		/// <returns>the passed in entity type builder</returns>
		internal static EntityTypeBuilder<TEntity> IsReadOnly<TEntity>(this EntityTypeBuilder<TEntity> builder)
			where TEntity : class
		{
			builder.HasAnnotation(READONLY_ANNOTATION, true);
			return builder;
		}
		
		/// <summary>Determines whether the passed in entity type has the readonly annotation set.
		/// </summary>
		/// <param name="entity">The entity type to check.</param>
		/// <returns>true if the entity type is marked as read-only, false otherwise</returns>
		public static bool IsReadOnly(this IEntityType entity)
		{
			var annotation = entity.FindAnnotation(READONLY_ANNOTATION);
			return annotation != null && (bool)annotation.Value;
		}
	}
}

