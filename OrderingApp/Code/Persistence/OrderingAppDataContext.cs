//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v5.9.</auto-generated>
//------------------------------------------------------------------------------
using System;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using OrderingApp.EntityClasses;

namespace OrderingApp
{
	/// <summary>Class which represents the DataContext for the project / group 'OrderingApp'</summary>
	public partial class OrderingAppDataContext : DbContext
	{
		partial void OnModelCreatingComplete();

		/// <summary>Constructor which accepts an already setup DbContextOptions instance</summary>
		/// <param name="options">The DbContextOptions object to use</param>
		public OrderingAppDataContext(DbContextOptions<OrderingAppDataContext> options) : base(options) {}
		
		/// <summary>Empty constructor which relies on OnConfiguring being overriden</summary>
		public OrderingAppDataContext() : base() {}
		
		/// <inheritdoc/>
		public override int SaveChanges(bool acceptAllChangesOnSuccess)
		{
			CheckReadonlyEntities();
			return base.SaveChanges(acceptAllChangesOnSuccess);
		}

		/// <inheritdoc/>
		public override Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = new CancellationToken())
		{
			CheckReadonlyEntities();
			return base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);
		}
		
		/// <inheritdoc/>
		protected override void OnModelCreating(ModelBuilder modelBuilder)
		{
			new OrderingAppModelBuilder().BuildModel(modelBuilder);
			OnModelCreatingComplete();
		}

		private void CheckReadonlyEntities()
		{
			var namesOfChangedReadOnlyEntities = this.ChangeTracker.Entries().Where(e => e.Metadata.IsReadOnly() && e.State != EntityState.Unchanged).Select(e => e.Metadata.Name).Distinct().ToList();
			if(namesOfChangedReadOnlyEntities.Any())
			{
				throw new InvalidOperationException($"Attempted to save the following read-only entitie(s): {string.Join(",", namesOfChangedReadOnlyEntities)}");
			}
		}

		/// <summary>Gets an object query for the entity set 'Customer', containing entity type 'Customer'</summary>
		public DbSet<Customer> Customers { get; set; } 
		/// <summary>Gets an object query for the entity set 'Product', containing entity type 'Product'</summary>
		public DbSet<Product> Products { get; set; } 
	}
}
